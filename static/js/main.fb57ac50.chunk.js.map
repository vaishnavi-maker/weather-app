{"version":3,"sources":["app_component/form.js","app_component/weather.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","className","onSubmit","loadweather","type","placeholder","name","autoComplete","Weather","cityname","weatherIcon","temp_celsius","maxminTemp","temp_min","temp_max","description","charAt","toUpperCase","slice","min","max","App","getWeather","e","a","preventDefault","country","target","elements","value","city","fetch","api_call","json","response","undefined","sys","setState","icon","celsius","alert","calCelsius","main","temp","weather","get_WeatherIcon","id","console","log","state","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeId","this","Math","floor","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb57ac50.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./formcss.css\";\r\n\r\nconst Form = props => {\r\n  return (\r\n    <div className=\"container h-100\">\r\n      <form onSubmit={props.loadweather}>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-3 offset-md-2\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"City\"\r\n              name=\"city\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Country\"\r\n              name=\"country\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 mt-md-0 mt-2 text-md-left \">\r\n            <button className=\"btn btn-warning\">Get Weather</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./weatherstyle.css\";\r\n\r\nconst Weather = props => {\r\n  return (\r\n    <div className=\"container text-light\">\r\n      <div className=\"Card data\">\r\n        <h1 className=\"text-white py-3\">{props.cityname}</h1>\r\n        <h5 className=\"py-4\">\r\n          <i className={`wi ${props.weatherIcon} display-1`} />\r\n        </h5>\r\n\r\n        {/* Get Celsius */}\r\n        {props.temp_celsius ? (\r\n          <h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>\r\n        ) : null}\r\n\r\n        {/* show max and min temp */}\r\n        {maxminTemp(props.temp_min, props.temp_max)}\r\n\r\n        {/* Weather description */}\r\n        <h4 className=\"py-3\">\r\n          {props.description.charAt(0).toUpperCase() +\r\n            props.description.slice(1)}\r\n        </h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n\r\nfunction maxminTemp(min, max) {\r\n  if (max && min) {\r\n    return (\r\n      <h3>\r\n        <span className=\"px-4\">{min}&deg;</span>\r\n        <span className=\"px-4\">{max}&deg;</span>\r\n      </h3>\r\n    );\r\n  }\r\n}","import React from \"react\";\nimport \"./App.css\";\nimport Form from \"./app_component/form\";\nimport Weather from \"./app_component/weather\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n// git project https://github.com/erikflowers/weather-icons\nimport \"weather-icons/css/weather-icons.css\";\n\nconst Api_Key = \"429736441cf3572838aa10530929f7cd\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      celsius: undefined,\n      temp_max: null,\n      temp_min: null,\n      description: \"\"\n    };\n    \n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({ icon: icons.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: icons.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({ icon: icons.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: icons.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: icons.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: icons.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: icons.Clouds });\n        break;\n      default:\n        this.setState({ icon: icons.Clouds });\n    }\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  getWeather = async e => {\n    e.preventDefault();\n\n    const country = e.target.elements.country.value;\n    const city = e.target.elements.city.value;\n\n    if (country && city) \n    {\n        const api_call = await fetch(\n          `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`\n        );\n\n        const response = await api_call.json();\n        \n        if(response.sys?.country==undefined)\n        {\n          this.setState({\n            city: undefined,\n            country: undefined,\n            icon: undefined,\n            celsius: undefined,\n            temp_max: null,\n            temp_min: null,\n            description: \"\"\n          });\n          alert(\"Please Enter valid City and Country name ...!\");\n        }\n        else\n        {\n            this.setState({\n              city: `${response.name}, ${response.sys.country}`,\n              country: response.sys.country,\n              celsius: this.calCelsius(response.main.temp),\n              temp_max: this.calCelsius(response.main.temp_max),\n              temp_min: this.calCelsius(response.main.temp_min),\n              description: response.weather[0].description\n            });\n\n            // seting icons\n            this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n            \n            console.log(response);\n        }\n    } \n    else\n    {\n      this.setState({\n        city: undefined,\n        country: \"\",\n        icon: undefined,\n        celsius: undefined,\n        temp_max: null,\n        temp_min: null,\n        description: \"\"\n      });\n      alert(\"Please Enter City and Country...!\")\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form loadweather={this.getWeather} />\n        <Weather\n          cityname={this.state.city}\n          weatherIcon={this.state.icon}\n          temp_celsius={this.state.celsius}\n          temp_max={this.state.temp_max}\n          temp_min={this.state.temp_min}\n          description={this.state.description}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}